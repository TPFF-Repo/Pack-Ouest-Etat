local function map(a, f)
    local res = {}
    if a and type(a) =="table" then
        for _, v in ipairs(a) do
            table.insert(res, f(v))
        end
    end
    return res
end

local function intRange(start, stop, step)
    local a = {}
    local i = start
    while i <= stop do
        table.insert(a, i)
        i = i + step
    end
    return a
end

local variant_00 = "construction/building/Briouze.mdl"

function data()

return { 
	type = "ASSET_TRACK",
	description = {
			--description = _("Assets des Gares Ouest-Etat (Bretagne - Pays de la Loire)"),
			name = _("Gares Normandes"),
	},
	availability =
	{
			yearFrom = 1935, --date d'apparition de la pancarte certainement après la creation de la SNCF
			yearTo = 0,
	},
	buildMode = "MULTI",
	categories = { "Gares Ouest-Etat", },
	order = 4403,       --order of your loco will appear
	skipCollision = true,
	autoRemovable = false, --se supprime tous seul quand la voie s'enléve.
	params = {	
	    {
			key = "positiony_gare",
			name = _("Position"), --translate on string.lua
			uiType = "BUTTON",
			values = { _("Gauche"), _("Droite") },
			tooltip = _(""),
			defaultIndex = 0,
		},
		{
			key = "offsetz",
			name = _("Offset Z"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
			key = "offsety",
			name = _("Offset Y"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
			key = "offsetx",
			name = _("Offset X"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
		key = "variant_gares", 
		name = _("Variantes"), --Strings: ["asset_variants"] = "Variantes", --les petites images si tu veux les images
		uiType = "COMBOBOX",
		values = { _("Briouze"),}
		},
	},

	updateFn = function(params)
		local result = { }
		result.models = { }
		local grad = 0
		local height = 0
		local shiftm = 0
		local spacingm = 0
		local offsetz = intRange(-500, 500, 5)[params.offsetz+1]/100
		local offsety = intRange(-500, 500, 5)[params.offsety+1]/100
		local offsetx = intRange(-500, 500, 5)[params.offsetx+1]/100
		

	     -- Règle la valeur d'espacement de l'asset
        if params.positiony_gare == 0 then shiftm = -5 end
		if params.positiony_gare == 0 then height = 1 end
		if params.positiony_gare == 1 then shiftm = 5 end
		if params.positiony_gare == 1 then height = 1 end
			
	--Transf du modele
		if ( params.variant_gares == 0 ) then result.models[#result.models+1] = { id = variant_00, transf = { 1, 0, grad, 0, 0, 1, 0, 0, grad, 0, 1, 0, spacingm+offsetx, shiftm+offsety, height+offsetz, 1 } } end
				
	
		result.terrainAlignmentLists = { { type = "EQUAL", faces = {} } }
		
		result.groundFaces = {
			{  
			face = { { -0.01, -0.01, 0 }, { 0.01, -0.01, 0 }, { 0.01, 0.01, 0 } },
			modes = {
				{
				  type = "FILL",               
				  key = "industry_floor.lua"
				}
			},
			loop = true,
			alignmentOffsetMode = "OBJECT",
			alignmentDirMode = "OBJECT",
			alignmentOffset = { -2.0, -1.0 },
		   
			},
		}
		return result
	end
}

end