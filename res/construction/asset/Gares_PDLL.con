local vec3 = require "vec3"
local transf = require "transf"

local function map(a, f)
    local res = {}
    if a and type(a) =="table" then
        for _, v in ipairs(a) do
            table.insert(res, f(v))
        end
    end
    return res
end

local function intRange(start, stop, step)
    local a = {}
    local i = start
    while i <= stop do
        table.insert(a, i)
        i = i + step
    end
    return a
end

local degrees = intRange(-180,180, 1)

local models = {
    "Ancenis",
    "Cholet",
}

function data()

return { 
	type = "ASSET_TRACK",
	description = {
			--description = _("Assets des Gares Ouest-Etat (Bretagne - Pays de la Loire)"),
			name = _("Gares Pays de la Loire"),
	},
	availability =
	{
			yearFrom = 1935, --date d'apparition de la pancarte certainement après la creation de la SNCF
			yearTo = 0,
	},
	buildMode = "MULTI",
	categories = { "Gares Ouest-Etat", },
	order = 4402,       --order of your loco will appear
	skipCollision = true,
	autoRemovable = false, --se supprime tous seul quand la voie s'enléve.
	params = {

	    
	    {
			key = "positiony_gare",
			name = _("Position"), --translate on string.lua
			uiType = "BUTTON",
			values = { _("Gauche"), _("Droite") },
			tooltip = _(""),
			defaultIndex = 0,
		},
		{
            key = "variant_gares",
            name = _("Variantes"), --Strings: ["asset_variants"] = "Variantes", --les petites images si tu veux les images
            uiType = "ICON_BUTTON",
            values = {
					_("ui/construction/asset/gares/Ancenis@2x.tga"),
					_("ui/construction/asset/gares/Cholet@2x.tga"),
			},
		},
        {
        	key = "socle",
        	name = _("Socle de Base"),
        	values = { _("Oui"), _("Non") },
        	defaultIndex = 0
        },
		{
			key = "AlignTerrain",
			name = _("Alignement terrain"),
			values = { _("Oui"), _("Non") },
			defaultIndex = 1
		},
		{
			key = "offsetz",
			name = _("Offset Z"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
			key = "offsety",
			name = _("Offset Y"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
			key = "offsetx",
			name = _("Offset X"),
			values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
			uiType = "SLIDER",
			defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
		},
		{
            key = "zRotate",
            name = _("Rotation Z"),
            values = map(degrees, function(i) return ""..i.." °"  end),
            uiType = "SLIDER",
            defaultIndex = math.floor(#degrees/2),
        },

	},

	updateFn = function(params)
		local result = { }
		result.models = { }
		local model = models[params.variant_gares+1]
		local grad = 0
		local height = 0
		local shiftm = 0
		local spacingm = 0
		local offsetz = intRange(-500, 500, 5)[params.offsetz+1]/100
		local offsety = intRange(-500, 500, 5)[params.offsety+1]/100
		local offsetx = intRange(-500, 500, 5)[params.offsetx+1]/100
		local zRotate = degrees[params.zRotate+1]
		

	     -- Règle la valeur d'espacement de l'asset
        if params.positiony_gare == 0 then shiftm = -5 end
		if params.positiony_gare == 0 then height = 1 end
		if params.positiony_gare == 1 then shiftm = 5 end
		if params.positiony_gare == 1 then height = 1 end
			
	--Transf du modele
        if params.socle == 0 then
            result.models = {{id = "assets/gares/"..models[params.variant_gares+1]..".mdl", transf = transf.rotZYXTransl(transf.degToRad(zRotate, 0, grad), vec3.new(spacingm+offsetx, shiftm+offsety, height+offsetz))}}
        else
            result.models = {{id = "assets/gares/"..models[params.variant_gares+1].."_ss.mdl", transf = transf.rotZYXTransl(transf.degToRad(zRotate, 0, grad), vec3.new(spacingm+offsetx, shiftm+offsety, height+offsetz))}}
        end

       if params.AlignTerrain == 1 then
			result.groundFaces = { { face = {  {0.001, -0.001, 0}, {-0.001, -0.001, 0}, {-0.001, 0.001, 0}, {0.001, 0.001, 0}, }, modes = { { type = "FILL", key = "ballast.lua" } }, loop = false, alignmentOffsetMode = "OBJECT", alignmentDirMode = "OBJECT", }, }
				result.terrainAlignmentLists = { { type = "EQUAL", faces = {} } }
			else
				result.groundFaces = { { face = {  {0.001, -0.001, 0}, {-0.001, -0.001, 0}, {-0.001, 0.001, 0}, {0.001, 0.001, 0}, }, modes = { { type = "FILL", key = "ballast.lua" } }, loop = false, alignmentOffsetMode = "OBJECT", alignmentDirMode = "OBJECT", }, }
			end
				
		return result
	end
}

end