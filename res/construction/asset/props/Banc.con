local vec3 = require "vec3"
local transf = require "transf"

local function map(a, f)
	local res = {}
	if a and type(a) =="table" then
		for _, v in ipairs(a) do
			table.insert(res, f(v))
		end
	end
	return res
end

local function intRange(start, stop, step)
	local a = {}
	local i = start
	while i <= stop do
		table.insert(a, i)
		i = i + step
	end
	return a
end

local degrees = intRange(-180,180, 1)

local modelsBanc = {
    "beton_1",
    "beton_2",
}

local tailleBanc = {
    "cour",
    "long",
}

function data()
    return {
        type = "ASSET_TRACK",
        buildMode = "MULTI",
        description = {
            name = _("Banc"),
            icon = "ui/construction/asset/banc.tga"
        },
        categories = {"Gares Ouest-Etat"},
        skipCollision = true,--false,
        autoRemovable = false,
        order = 4406,
        params = {
            {
                key = "type_banc",
                name = _("Type"),
                uiType = "COMBOBOX",
                values = {
                    _("Béton 1"),
                    _("Béton 2"),
                },
                defaultIndex = 0,
            },
            {
                key = "size_banc",
                name = _("Taille"),
                uiType = "BUTTON",
                values = {
                    _("Cour"),
                    _("Long"),
                },
                defaultIndex = 0,
            },
            {
            	key = "positiony_abri",
            	name = _("Position"), --translate on string.lua
            	uiType = "BUTTON",
            	values = { _("Gauche"), _("Droite") },
            	tooltip = _(""),
            	defaultIndex = 0,
            },
            {
            	key = "offsetz",
            	name = _("Hauteur"),
            	values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
            	uiType = "SLIDER",
            	defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
            },
            {
            	key = "offsety",
            	name = _("Distance de la voie"),
            	values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
            	uiType = "SLIDER",
            	defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
            },
            {
            	key = "offsetx",
            	name = _("Espacement"),
            	values = map(intRange(-500, 500, 5), function(i) return ""..i.." cm"  end),
            	uiType = "SLIDER",
            	defaultIndex = math.floor(#intRange(-500, 500, 5)/2)
            },
            {
                key = "zRotate",
                name = _("Rotation Z"),
                values = map(degrees, function(i) return ""..i.." °"  end),
                uiType = "SLIDER",
                defaultIndex = math.floor(#degrees/2),
            },
        },
        updateFn = function(params)
            local result = {}
            result.models = { }
            local grad = 0
            local height = 0
            local shiftm = 0
            local spacingm = 0
            local offsetz = intRange(-500, 500, 5)[params.offsetz+1]/100
            local offsety = intRange(-500, 500, 5)[params.offsety+1]/100
            local offsetx = intRange(-500, 500, 5)[params.offsetx+1]/100
            local zRotate = degrees[params.zRotate+1]
            local type = modelsBanc[params.type_banc+1]
            local size = tailleBanc[params.size_banc+1]



             -- Règle la valeur d'espacement de l'asset
            if params.positiony_abri == 0 then shiftm = -5 end
            if params.positiony_abri == 0 then height = 1 end
            if params.positiony_abri == 1 then shiftm = 5 end
            if params.positiony_abri == 1 then height = 1 end

            result.models = {{id = "assets/props/banc/"..type.."_"..size..".mdl", transf = transf.rotZYXTransl(transf.degToRad(zRotate, 0, grad), vec3.new(spacingm+offsetx, shiftm+offsety, height+offsetz))}}

            result.terrainAlignmentLists = { { type = "EQUAL", faces = {} } }

            result.groundFaces = {
            	{
            	face = { { -0.01, -0.01, 0 }, { 0.01, -0.01, 0 }, { 0.01, 0.01, 0 } },
            	modes = {
            		{
            		  type = "FILL",
            		  key = "industry_floor.lua"
            		}
            	},
            	loop = true,
            	alignmentOffsetMode = "OBJECT",
            	alignmentDirMode = "OBJECT",
            	alignmentOffset = { -2.0, -1.0 },
            	},
            }
            return result

        end
    }
end